/**
 * Renders a string with keywords highlighted
 */
export declare class KeywordMarkElement extends HTMLElement {
    /** @inheritdoc */
    static get observedAttributes(): string[];
    /**
     * Keywords to highlight
     */
    get keywords(): string;
    /**
     * Sets the keywords to highlight
     * @param {string} val keywords to set
     */
    set keywords(val: string);
    /**
     * Delimiter for keywords
     */
    get delimiter(): string;
    /**
     * Sets delimiter for keywords
     * @param {string} val delimiter to set
     */
    set delimiter(val: string);
    /**
     * Observer of child nodes
     */
    private __observer?;
    /** constructor */
    constructor();
    /** @inheritdoc */
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    /** @inheritdoc */
    connectedCallback(): void;
    /** @inheritdoc */
    disconnectedCallback(): void;
    /**
     * Renders the current string with keywords highlighted
     */
    protected _render(): void;
}
declare global {
    interface HTMLElementTagNameMap {
        'keyword-mark': KeywordMarkElement;
    }
}
